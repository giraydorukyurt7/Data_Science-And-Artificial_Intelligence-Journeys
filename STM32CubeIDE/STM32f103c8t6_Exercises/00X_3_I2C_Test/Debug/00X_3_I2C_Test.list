
00X_3_I2C_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002158  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08002264  08002264  00012264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022f8  080022f8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080022f8  080022f8  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022f8  080022f8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f8  080022f8  000122f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022fc  080022fc  000122fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000001c  0800231c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  0800231c  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY
 13 .debug_info   000065b6  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000150a  00000000  00000000  0002663e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a0  00000000  00000000  00027b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ce  00000000  00000000  000282e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000160fc  00000000  00000000  000288b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009090  00000000  00000000  0003e9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007ea01  00000000  00000000  00047a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001e8c  00000000  00000000  000c6444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000c82d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800224c 	.word	0x0800224c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	0800224c 	.word	0x0800224c

0800014c <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000156:	4a38      	ldr	r2, [pc, #224]	; (8000238 <HD44780_Init+0xec>)
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800015c:	4b37      	ldr	r3, [pc, #220]	; (800023c <HD44780_Init+0xf0>)
 800015e:	2208      	movs	r2, #8
 8000160:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000162:	4b37      	ldr	r3, [pc, #220]	; (8000240 <HD44780_Init+0xf4>)
 8000164:	2200      	movs	r2, #0
 8000166:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000168:	4b33      	ldr	r3, [pc, #204]	; (8000238 <HD44780_Init+0xec>)
 800016a:	781b      	ldrb	r3, [r3, #0]
 800016c:	2b01      	cmp	r3, #1
 800016e:	d907      	bls.n	8000180 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000170:	4b33      	ldr	r3, [pc, #204]	; (8000240 <HD44780_Init+0xf4>)
 8000172:	781b      	ldrb	r3, [r3, #0]
 8000174:	f043 0308 	orr.w	r3, r3, #8
 8000178:	b2da      	uxtb	r2, r3
 800017a:	4b31      	ldr	r3, [pc, #196]	; (8000240 <HD44780_Init+0xf4>)
 800017c:	701a      	strb	r2, [r3, #0]
 800017e:	e006      	b.n	800018e <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000180:	4b2f      	ldr	r3, [pc, #188]	; (8000240 <HD44780_Init+0xf4>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	f043 0304 	orr.w	r3, r3, #4
 8000188:	b2da      	uxtb	r2, r3
 800018a:	4b2d      	ldr	r3, [pc, #180]	; (8000240 <HD44780_Init+0xf4>)
 800018c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800018e:	f000 fa13 	bl	80005b8 <DelayInit>
  HAL_Delay(50);
 8000192:	2032      	movs	r0, #50	; 0x32
 8000194:	f000 fcae 	bl	8000af4 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000198:	4b28      	ldr	r3, [pc, #160]	; (800023c <HD44780_Init+0xf0>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	4618      	mov	r0, r3
 800019e:	f000 f9d1 	bl	8000544 <ExpanderWrite>
  HAL_Delay(1000);
 80001a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a6:	f000 fca5 	bl	8000af4 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80001aa:	2030      	movs	r0, #48	; 0x30
 80001ac:	f000 f9b9 	bl	8000522 <Write4Bits>
  DelayUS(4500);
 80001b0:	f241 1094 	movw	r0, #4500	; 0x1194
 80001b4:	f000 fa28 	bl	8000608 <DelayUS>

  Write4Bits(0x03 << 4);
 80001b8:	2030      	movs	r0, #48	; 0x30
 80001ba:	f000 f9b2 	bl	8000522 <Write4Bits>
  DelayUS(4500);
 80001be:	f241 1094 	movw	r0, #4500	; 0x1194
 80001c2:	f000 fa21 	bl	8000608 <DelayUS>

  Write4Bits(0x03 << 4);
 80001c6:	2030      	movs	r0, #48	; 0x30
 80001c8:	f000 f9ab 	bl	8000522 <Write4Bits>
  DelayUS(4500);
 80001cc:	f241 1094 	movw	r0, #4500	; 0x1194
 80001d0:	f000 fa1a 	bl	8000608 <DelayUS>

  Write4Bits(0x02 << 4);
 80001d4:	2020      	movs	r0, #32
 80001d6:	f000 f9a4 	bl	8000522 <Write4Bits>
  DelayUS(100);
 80001da:	2064      	movs	r0, #100	; 0x64
 80001dc:	f000 fa14 	bl	8000608 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80001e0:	4b17      	ldr	r3, [pc, #92]	; (8000240 <HD44780_Init+0xf4>)
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	f043 0320 	orr.w	r3, r3, #32
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f95c 	bl	80004a8 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80001f0:	4b14      	ldr	r3, [pc, #80]	; (8000244 <HD44780_Init+0xf8>)
 80001f2:	2204      	movs	r2, #4
 80001f4:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80001f6:	f000 f88b 	bl	8000310 <HD44780_Display>
  HD44780_Clear();
 80001fa:	f000 f82b 	bl	8000254 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80001fe:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HD44780_Init+0xfc>)
 8000200:	2202      	movs	r2, #2
 8000202:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000204:	4b10      	ldr	r3, [pc, #64]	; (8000248 <HD44780_Init+0xfc>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	f043 0304 	orr.w	r3, r3, #4
 800020c:	b2db      	uxtb	r3, r3
 800020e:	4618      	mov	r0, r3
 8000210:	f000 f94a 	bl	80004a8 <SendCommand>
  DelayUS(4500);
 8000214:	f241 1094 	movw	r0, #4500	; 0x1194
 8000218:	f000 f9f6 	bl	8000608 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 800021c:	490b      	ldr	r1, [pc, #44]	; (800024c <HD44780_Init+0x100>)
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8eb 	bl	80003fa <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000224:	490a      	ldr	r1, [pc, #40]	; (8000250 <HD44780_Init+0x104>)
 8000226:	2001      	movs	r0, #1
 8000228:	f000 f8e7 	bl	80003fa <HD44780_CreateSpecialChar>

  HD44780_Home();
 800022c:	f000 f81d 	bl	800026a <HD44780_Home>
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	2000003b 	.word	0x2000003b
 800023c:	2000003c 	.word	0x2000003c
 8000240:	20000038 	.word	0x20000038
 8000244:	20000039 	.word	0x20000039
 8000248:	2000003a 	.word	0x2000003a
 800024c:	20000000 	.word	0x20000000
 8000250:	20000008 	.word	0x20000008

08000254 <HD44780_Clear>:

void HD44780_Clear()
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000258:	2001      	movs	r0, #1
 800025a:	f000 f925 	bl	80004a8 <SendCommand>
  DelayUS(2000);
 800025e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000262:	f000 f9d1 	bl	8000608 <DelayUS>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}

0800026a <HD44780_Home>:

void HD44780_Home()
{
 800026a:	b580      	push	{r7, lr}
 800026c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800026e:	2002      	movs	r0, #2
 8000270:	f000 f91a 	bl	80004a8 <SendCommand>
  DelayUS(2000);
 8000274:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000278:	f000 f9c6 	bl	8000608 <DelayUS>
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}

08000280 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000280:	b590      	push	{r4, r7, lr}
 8000282:	b087      	sub	sp, #28
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	460a      	mov	r2, r1
 800028a:	71fb      	strb	r3, [r7, #7]
 800028c:	4613      	mov	r3, r2
 800028e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <HD44780_SetCursor+0x5c>)
 8000292:	f107 0408 	add.w	r4, r7, #8
 8000296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <HD44780_SetCursor+0x60>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	79ba      	ldrb	r2, [r7, #6]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d303      	bcc.n	80002ae <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <HD44780_SetCursor+0x60>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	3b01      	subs	r3, #1
 80002ac:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80002ae:	79bb      	ldrb	r3, [r7, #6]
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	3318      	adds	r3, #24
 80002b4:	443b      	add	r3, r7
 80002b6:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	4413      	add	r3, r2
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	b25b      	sxtb	r3, r3
 80002c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80002c8:	b25b      	sxtb	r3, r3
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 f8eb 	bl	80004a8 <SendCommand>
}
 80002d2:	bf00      	nop
 80002d4:	371c      	adds	r7, #28
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd90      	pop	{r4, r7, pc}
 80002da:	bf00      	nop
 80002dc:	08002264 	.word	0x08002264
 80002e0:	2000003b 	.word	0x2000003b

080002e4 <HD44780_NoDisplay>:

void HD44780_NoDisplay()
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_DISPLAYON;
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <HD44780_NoDisplay+0x28>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	f023 0304 	bic.w	r3, r3, #4
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	4b06      	ldr	r3, [pc, #24]	; (800030c <HD44780_NoDisplay+0x28>)
 80002f4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80002f6:	4b05      	ldr	r3, [pc, #20]	; (800030c <HD44780_NoDisplay+0x28>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	4618      	mov	r0, r3
 8000302:	f000 f8d1 	bl	80004a8 <SendCommand>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000039 	.word	0x20000039

08000310 <HD44780_Display>:

void HD44780_Display()
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <HD44780_Display+0x28>)
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	f043 0304 	orr.w	r3, r3, #4
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <HD44780_Display+0x28>)
 8000320:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000322:	4b05      	ldr	r3, [pc, #20]	; (8000338 <HD44780_Display+0x28>)
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	f043 0308 	orr.w	r3, r3, #8
 800032a:	b2db      	uxtb	r3, r3
 800032c:	4618      	mov	r0, r3
 800032e:	f000 f8bb 	bl	80004a8 <SendCommand>
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000039 	.word	0x20000039

0800033c <HD44780_NoCursor>:

void HD44780_NoCursor()
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_CURSORON;
 8000340:	4b08      	ldr	r3, [pc, #32]	; (8000364 <HD44780_NoCursor+0x28>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	f023 0302 	bic.w	r3, r3, #2
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <HD44780_NoCursor+0x28>)
 800034c:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <HD44780_NoCursor+0x28>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	f043 0308 	orr.w	r3, r3, #8
 8000356:	b2db      	uxtb	r3, r3
 8000358:	4618      	mov	r0, r3
 800035a:	f000 f8a5 	bl	80004a8 <SendCommand>
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000039 	.word	0x20000039

08000368 <HD44780_Cursor>:

void HD44780_Cursor()
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  dpControl |= LCD_CURSORON;
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <HD44780_Cursor+0x28>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	f043 0302 	orr.w	r3, r3, #2
 8000374:	b2da      	uxtb	r2, r3
 8000376:	4b06      	ldr	r3, [pc, #24]	; (8000390 <HD44780_Cursor+0x28>)
 8000378:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800037a:	4b05      	ldr	r3, [pc, #20]	; (8000390 <HD44780_Cursor+0x28>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	b2db      	uxtb	r3, r3
 8000384:	4618      	mov	r0, r3
 8000386:	f000 f88f 	bl	80004a8 <SendCommand>
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000039 	.word	0x20000039

08000394 <HD44780_NoBlink>:

void HD44780_NoBlink()
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 8000398:	4b08      	ldr	r3, [pc, #32]	; (80003bc <HD44780_NoBlink+0x28>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	f023 0301 	bic.w	r3, r3, #1
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <HD44780_NoBlink+0x28>)
 80003a4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80003a6:	4b05      	ldr	r3, [pc, #20]	; (80003bc <HD44780_NoBlink+0x28>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	f043 0308 	orr.w	r3, r3, #8
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	4618      	mov	r0, r3
 80003b2:	f000 f879 	bl	80004a8 <SendCommand>
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000039 	.word	0x20000039

080003c0 <HD44780_Blink>:

void HD44780_Blink()
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 80003c4:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <HD44780_Blink+0x28>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <HD44780_Blink+0x28>)
 80003d0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80003d2:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <HD44780_Blink+0x28>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	f043 0308 	orr.w	r3, r3, #8
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 f863 	bl	80004a8 <SendCommand>
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000039 	.word	0x20000039

080003ec <HD44780_ScrollDisplayLeft>:

void HD44780_ScrollDisplayLeft(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 80003f0:	2018      	movs	r0, #24
 80003f2:	f000 f859 	bl	80004a8 <SendCommand>
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}

080003fa <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b084      	sub	sp, #16
 80003fe:	af00      	add	r7, sp, #0
 8000400:	4603      	mov	r3, r0
 8000402:	6039      	str	r1, [r7, #0]
 8000404:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	f003 0307 	and.w	r3, r3, #7
 800040c:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	00db      	lsls	r3, r3, #3
 8000412:	b25b      	sxtb	r3, r3
 8000414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000418:	b25b      	sxtb	r3, r3
 800041a:	b2db      	uxtb	r3, r3
 800041c:	4618      	mov	r0, r3
 800041e:	f000 f843 	bl	80004a8 <SendCommand>
  for (int i=0; i<8; i++)
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	e009      	b.n	800043c <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	683a      	ldr	r2, [r7, #0]
 800042c:	4413      	add	r3, r2
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	4618      	mov	r0, r3
 8000432:	f000 f847 	bl	80004c4 <SendChar>
  for (int i=0; i<8; i++)
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	3301      	adds	r3, #1
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	2b07      	cmp	r3, #7
 8000440:	ddf2      	ble.n	8000428 <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000442:	bf00      	nop
 8000444:	bf00      	nop
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000454:	e006      	b.n	8000464 <HD44780_PrintStr+0x18>
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	1c5a      	adds	r2, r3, #1
 800045a:	607a      	str	r2, [r7, #4]
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	4618      	mov	r0, r3
 8000460:	f000 f830 	bl	80004c4 <SendChar>
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d1f4      	bne.n	8000456 <HD44780_PrintStr+0xa>
}
 800046c:	bf00      	nop
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <HD44780_NoBacklight>:
  if(new_val) HD44780_Backlight();
  else HD44780_NoBacklight();
}

void HD44780_NoBacklight(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 800047c:	4b03      	ldr	r3, [pc, #12]	; (800048c <HD44780_NoBacklight+0x14>)
 800047e:	2200      	movs	r2, #0
 8000480:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000482:	2000      	movs	r0, #0
 8000484:	f000 f85e 	bl	8000544 <ExpanderWrite>
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	2000003c 	.word	0x2000003c

08000490 <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <HD44780_Backlight+0x14>)
 8000496:	2208      	movs	r2, #8
 8000498:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800049a:	2000      	movs	r0, #0
 800049c:	f000 f852 	bl	8000544 <ExpanderWrite>
}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	2000003c 	.word	0x2000003c

080004a8 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f812 	bl	80004e0 <Send>
}
 80004bc:	bf00      	nop
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <SendChar>:

static void SendChar(uint8_t ch)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	2101      	movs	r1, #1
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 f804 	bl	80004e0 <Send>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	460a      	mov	r2, r1
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	4613      	mov	r3, r2
 80004ee:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	f023 030f 	bic.w	r3, r3, #15
 80004f6:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	011b      	lsls	r3, r3, #4
 80004fc:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80004fe:	7bfa      	ldrb	r2, [r7, #15]
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	4313      	orrs	r3, r2
 8000504:	b2db      	uxtb	r3, r3
 8000506:	4618      	mov	r0, r3
 8000508:	f000 f80b 	bl	8000522 <Write4Bits>
  Write4Bits((lownib)|mode);
 800050c:	7bba      	ldrb	r2, [r7, #14]
 800050e:	79bb      	ldrb	r3, [r7, #6]
 8000510:	4313      	orrs	r3, r2
 8000512:	b2db      	uxtb	r3, r3
 8000514:	4618      	mov	r0, r3
 8000516:	f000 f804 	bl	8000522 <Write4Bits>
}
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000522:	b580      	push	{r7, lr}
 8000524:	b082      	sub	sp, #8
 8000526:	af00      	add	r7, sp, #0
 8000528:	4603      	mov	r3, r0
 800052a:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800052c:	79fb      	ldrb	r3, [r7, #7]
 800052e:	4618      	mov	r0, r3
 8000530:	f000 f808 	bl	8000544 <ExpanderWrite>
  PulseEnable(value);
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f820 	bl	800057c <PulseEnable>
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af02      	add	r7, sp, #8
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <ExpanderWrite+0x30>)
 8000550:	781a      	ldrb	r2, [r3, #0]
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	4313      	orrs	r3, r2
 8000556:	b2db      	uxtb	r3, r3
 8000558:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800055a:	f107 020f 	add.w	r2, r7, #15
 800055e:	230a      	movs	r3, #10
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	2301      	movs	r3, #1
 8000564:	214e      	movs	r1, #78	; 0x4e
 8000566:	4804      	ldr	r0, [pc, #16]	; (8000578 <ExpanderWrite+0x34>)
 8000568:	f000 fe94 	bl	8001294 <HAL_I2C_Master_Transmit>
}
 800056c:	bf00      	nop
 800056e:	3710      	adds	r7, #16
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	2000003c 	.word	0x2000003c
 8000578:	20000040 	.word	0x20000040

0800057c <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	b2db      	uxtb	r3, r3
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff ffd8 	bl	8000544 <ExpanderWrite>
  DelayUS(20);
 8000594:	2014      	movs	r0, #20
 8000596:	f000 f837 	bl	8000608 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	f023 0304 	bic.w	r3, r3, #4
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff ffce 	bl	8000544 <ExpanderWrite>
  DelayUS(20);
 80005a8:	2014      	movs	r0, #20
 80005aa:	f000 f82d 	bl	8000608 <DelayUS>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <DelayInit>:

static void DelayInit(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80005bc:	4b10      	ldr	r3, [pc, #64]	; (8000600 <DelayInit+0x48>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <DelayInit+0x48>)
 80005c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80005c6:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <DelayInit+0x48>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	4a0c      	ldr	r2, [pc, #48]	; (8000600 <DelayInit+0x48>)
 80005ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005d2:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <DelayInit+0x4c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <DelayInit+0x4c>)
 80005da:	f023 0301 	bic.w	r3, r3, #1
 80005de:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <DelayInit+0x4c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a07      	ldr	r2, [pc, #28]	; (8000604 <DelayInit+0x4c>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <DelayInit+0x4c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80005f2:	bf00      	nop
  __ASM volatile ("NOP");
 80005f4:	bf00      	nop
  __ASM volatile ("NOP");
 80005f6:	bf00      	nop
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	e000edf0 	.word	0xe000edf0
 8000604:	e0001000 	.word	0xe0001000

08000608 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000608:	b480      	push	{r7}
 800060a:	b087      	sub	sp, #28
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000610:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <DelayUS+0x40>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <DelayUS+0x44>)
 8000616:	fba2 2303 	umull	r2, r3, r2, r3
 800061a:	0c9a      	lsrs	r2, r3, #18
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	fb02 f303 	mul.w	r3, r2, r3
 8000622:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <DelayUS+0x48>)
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <DelayUS+0x48>)
 800062c:	685a      	ldr	r2, [r3, #4]
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	1ad3      	subs	r3, r2, r3
 8000632:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	697a      	ldr	r2, [r7, #20]
 8000638:	429a      	cmp	r2, r3
 800063a:	d8f6      	bhi.n	800062a <DelayUS+0x22>
}
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	371c      	adds	r7, #28
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	20000010 	.word	0x20000010
 800064c:	431bde83 	.word	0x431bde83
 8000650:	e0001000 	.word	0xe0001000

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 f9e9 	bl	8000a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f891 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f8f9 	bl	8000858 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000666:	f000 f8c9 	bl	80007fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(2);
 800066a:	2002      	movs	r0, #2
 800066c:	f7ff fd6e 	bl	800014c <HD44780_Init>
  HD44780_Clear();
 8000670:	f7ff fdf0 	bl	8000254 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 8000674:	2100      	movs	r1, #0
 8000676:	2000      	movs	r0, #0
 8000678:	f7ff fe02 	bl	8000280 <HD44780_SetCursor>
  HD44780_PrintStr("HELLO");
 800067c:	483e      	ldr	r0, [pc, #248]	; (8000778 <main+0x124>)
 800067e:	f7ff fee5 	bl	800044c <HD44780_PrintStr>
  HD44780_SetCursor(10,1);
 8000682:	2101      	movs	r1, #1
 8000684:	200a      	movs	r0, #10
 8000686:	f7ff fdfb 	bl	8000280 <HD44780_SetCursor>
  HD44780_PrintStr("WORLD");
 800068a:	483c      	ldr	r0, [pc, #240]	; (800077c <main+0x128>)
 800068c:	f7ff fede 	bl	800044c <HD44780_PrintStr>
  HAL_Delay(2000);
 8000690:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000694:	f000 fa2e 	bl	8000af4 <HAL_Delay>

  HD44780_Clear();
 8000698:	f7ff fddc 	bl	8000254 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 800069c:	2100      	movs	r1, #0
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff fdee 	bl	8000280 <HD44780_SetCursor>
  HD44780_PrintStr("HELLO");
 80006a4:	4834      	ldr	r0, [pc, #208]	; (8000778 <main+0x124>)
 80006a6:	f7ff fed1 	bl	800044c <HD44780_PrintStr>
  HAL_Delay(2000);
 80006aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ae:	f000 fa21 	bl	8000af4 <HAL_Delay>
  HD44780_NoBacklight();
 80006b2:	f7ff fee1 	bl	8000478 <HD44780_NoBacklight>
  HAL_Delay(2000);
 80006b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ba:	f000 fa1b 	bl	8000af4 <HAL_Delay>
  HD44780_Backlight();
 80006be:	f7ff fee7 	bl	8000490 <HD44780_Backlight>

  HAL_Delay(2000);
 80006c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006c6:	f000 fa15 	bl	8000af4 <HAL_Delay>
  HD44780_Cursor();
 80006ca:	f7ff fe4d 	bl	8000368 <HD44780_Cursor>
  HAL_Delay(2000);
 80006ce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006d2:	f000 fa0f 	bl	8000af4 <HAL_Delay>
  HD44780_Blink();
 80006d6:	f7ff fe73 	bl	80003c0 <HD44780_Blink>
  HAL_Delay(5000);
 80006da:	f241 3088 	movw	r0, #5000	; 0x1388
 80006de:	f000 fa09 	bl	8000af4 <HAL_Delay>
  HD44780_NoBlink();
 80006e2:	f7ff fe57 	bl	8000394 <HD44780_NoBlink>
  HAL_Delay(2000);
 80006e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006ea:	f000 fa03 	bl	8000af4 <HAL_Delay>
  HD44780_NoCursor();
 80006ee:	f7ff fe25 	bl	800033c <HD44780_NoCursor>
  HAL_Delay(2000);
 80006f2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006f6:	f000 f9fd 	bl	8000af4 <HAL_Delay>

  HD44780_NoDisplay();
 80006fa:	f7ff fdf3 	bl	80002e4 <HD44780_NoDisplay>
  HAL_Delay(2000);
 80006fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000702:	f000 f9f7 	bl	8000af4 <HAL_Delay>
  HD44780_Display();
 8000706:	f7ff fe03 	bl	8000310 <HD44780_Display>

  HD44780_Clear();
 800070a:	f7ff fda3 	bl	8000254 <HD44780_Clear>
  HD44780_SetCursor(0,0);
 800070e:	2100      	movs	r1, #0
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff fdb5 	bl	8000280 <HD44780_SetCursor>
  HD44780_PrintStr("Learning STM32 with LCD is fun :-)");
 8000716:	481a      	ldr	r0, [pc, #104]	; (8000780 <main+0x12c>)
 8000718:	f7ff fe98 	bl	800044c <HD44780_PrintStr>
  int x;
  for(int x=0; x<40; x=x+1)
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	e008      	b.n	8000734 <main+0xe0>
  {
    HD44780_ScrollDisplayLeft();  //HD44780_ScrollDisplayRight();
 8000722:	f7ff fe63 	bl	80003ec <HD44780_ScrollDisplayLeft>
    HAL_Delay(500);
 8000726:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072a:	f000 f9e3 	bl	8000af4 <HAL_Delay>
  for(int x=0; x<40; x=x+1)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3301      	adds	r3, #1
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	2b27      	cmp	r3, #39	; 0x27
 8000738:	ddf3      	ble.n	8000722 <main+0xce>
  }

  char snum[5];
  for ( int x = 1; x <= 200 ; x++ )
 800073a:	2301      	movs	r3, #1
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	e016      	b.n	800076e <main+0x11a>
  {
    itoa(x, snum, 10);
 8000740:	463b      	mov	r3, r7
 8000742:	220a      	movs	r2, #10
 8000744:	4619      	mov	r1, r3
 8000746:	68b8      	ldr	r0, [r7, #8]
 8000748:	f001 fd10 	bl	800216c <itoa>
    HD44780_Clear();
 800074c:	f7ff fd82 	bl	8000254 <HD44780_Clear>
    HD44780_SetCursor(0,0);
 8000750:	2100      	movs	r1, #0
 8000752:	2000      	movs	r0, #0
 8000754:	f7ff fd94 	bl	8000280 <HD44780_SetCursor>
    HD44780_PrintStr(snum);
 8000758:	463b      	mov	r3, r7
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff fe76 	bl	800044c <HD44780_PrintStr>
    HAL_Delay (1000);
 8000760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000764:	f000 f9c6 	bl	8000af4 <HAL_Delay>
  for ( int x = 1; x <= 200 ; x++ )
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	3301      	adds	r3, #1
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	2bc8      	cmp	r3, #200	; 0xc8
 8000772:	dde5      	ble.n	8000740 <main+0xec>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000774:	e7fe      	b.n	8000774 <main+0x120>
 8000776:	bf00      	nop
 8000778:	08002274 	.word	0x08002274
 800077c:	0800227c 	.word	0x0800227c
 8000780:	08002284 	.word	0x08002284

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b090      	sub	sp, #64	; 0x40
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0318 	add.w	r3, r7, #24
 800078e:	2228      	movs	r2, #40	; 0x28
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f001 fd2e 	bl	80021f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007aa:	2301      	movs	r3, #1
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ae:	2310      	movs	r3, #16
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0318 	add.w	r3, r7, #24
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 f8c2 	bl	8001944 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007c6:	f000 f869 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fb30 	bl	8001e48 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007ee:	f000 f855 	bl	800089c <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3740      	adds	r7, #64	; 0x40
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_I2C1_Init+0x50>)
 8000802:	4a13      	ldr	r2, [pc, #76]	; (8000850 <MX_I2C1_Init+0x54>)
 8000804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_I2C1_Init+0x50>)
 8000808:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_I2C1_Init+0x58>)
 800080a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_I2C1_Init+0x50>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_I2C1_Init+0x50>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_I2C1_Init+0x50>)
 800081a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800081e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MX_I2C1_Init+0x50>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_I2C1_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	; (800084c <MX_I2C1_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_I2C1_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	; (800084c <MX_I2C1_Init+0x50>)
 800083a:	f000 fbe7 	bl	800100c <HAL_I2C_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000844:	f000 f82a 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000040 	.word	0x20000040
 8000850:	40005400 	.word	0x40005400
 8000854:	000186a0 	.word	0x000186a0

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_GPIO_Init+0x40>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	4a0d      	ldr	r2, [pc, #52]	; (8000898 <MX_GPIO_Init+0x40>)
 8000864:	f043 0304 	orr.w	r3, r3, #4
 8000868:	6193      	str	r3, [r2, #24]
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MX_GPIO_Init+0x40>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	f003 0304 	and.w	r3, r3, #4
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MX_GPIO_Init+0x40>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	4a07      	ldr	r2, [pc, #28]	; (8000898 <MX_GPIO_Init+0x40>)
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	6193      	str	r3, [r2, #24]
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <MX_GPIO_Init+0x40>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f003 0308 	and.w	r3, r3, #8
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	40021000 	.word	0x40021000

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_MspInit+0x5c>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	4a14      	ldr	r2, [pc, #80]	; (8000904 <HAL_MspInit+0x5c>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6193      	str	r3, [r2, #24]
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_MspInit+0x5c>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_MspInit+0x5c>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <HAL_MspInit+0x5c>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d0:	61d3      	str	r3, [r2, #28]
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <HAL_MspInit+0x5c>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <HAL_MspInit+0x60>)
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	4a04      	ldr	r2, [pc, #16]	; (8000908 <HAL_MspInit+0x60>)
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	40021000 	.word	0x40021000
 8000908:	40010000 	.word	0x40010000

0800090c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a15      	ldr	r2, [pc, #84]	; (800097c <HAL_I2C_MspInit+0x70>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d123      	bne.n	8000974 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <HAL_I2C_MspInit+0x74>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a13      	ldr	r2, [pc, #76]	; (8000980 <HAL_I2C_MspInit+0x74>)
 8000932:	f043 0308 	orr.w	r3, r3, #8
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_I2C_MspInit+0x74>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0308 	and.w	r3, r3, #8
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000944:	23c0      	movs	r3, #192	; 0xc0
 8000946:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000948:	2312      	movs	r3, #18
 800094a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4619      	mov	r1, r3
 8000956:	480b      	ldr	r0, [pc, #44]	; (8000984 <HAL_I2C_MspInit+0x78>)
 8000958:	f000 f9d4 	bl	8000d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_I2C_MspInit+0x74>)
 800095e:	69db      	ldr	r3, [r3, #28]
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <HAL_I2C_MspInit+0x74>)
 8000962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000966:	61d3      	str	r3, [r2, #28]
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_I2C_MspInit+0x74>)
 800096a:	69db      	ldr	r3, [r3, #28]
 800096c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000974:	bf00      	nop
 8000976:	3720      	adds	r7, #32
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40005400 	.word	0x40005400
 8000980:	40021000 	.word	0x40021000
 8000984:	40010c00 	.word	0x40010c00

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr

080009b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr

080009be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr

080009ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ce:	f000 f875 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
	...

080009e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009e4:	f7ff fff7 	bl	80009d6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480b      	ldr	r0, [pc, #44]	; (8000a18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009ea:	490c      	ldr	r1, [pc, #48]	; (8000a1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009ec:	4a0c      	ldr	r2, [pc, #48]	; (8000a20 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a00:	4c09      	ldr	r4, [pc, #36]	; (8000a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f001 fbf9 	bl	8002204 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a12:	f7ff fe1f 	bl	8000654 <main>
  bx lr
 8000a16:	4770      	bx	lr
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a20:	08002300 	.word	0x08002300
  ldr r2, =_sbss
 8000a24:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a28:	20000098 	.word	0x20000098

08000a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_2_IRQHandler>
	...

08000a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_Init+0x28>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_Init+0x28>)
 8000a3a:	f043 0310 	orr.w	r3, r3, #16
 8000a3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f92b 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a46:	200f      	movs	r0, #15
 8000a48:	f000 f808 	bl	8000a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a4c:	f7ff ff2c 	bl	80008a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40022000 	.word	0x40022000

08000a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_InitTick+0x54>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_InitTick+0x58>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f935 	bl	8000cea <HAL_SYSTICK_Config>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e00e      	b.n	8000aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b0f      	cmp	r3, #15
 8000a8e:	d80a      	bhi.n	8000aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a90:	2200      	movs	r2, #0
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	f000 f90b 	bl	8000cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a9c:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <HAL_InitTick+0x5c>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	e000      	b.n	8000aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20000010 	.word	0x20000010
 8000ab4:	20000018 	.word	0x20000018
 8000ab8:	20000014 	.word	0x20000014

08000abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <HAL_IncTick+0x1c>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x20>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a03      	ldr	r2, [pc, #12]	; (8000adc <HAL_IncTick+0x20>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	20000018 	.word	0x20000018
 8000adc:	20000094 	.word	0x20000094

08000ae0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <HAL_GetTick+0x10>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr
 8000af0:	20000094 	.word	0x20000094

08000af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000afc:	f7ff fff0 	bl	8000ae0 <HAL_GetTick>
 8000b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0c:	d005      	beq.n	8000b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_Delay+0x44>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b1a:	bf00      	nop
 8000b1c:	f7ff ffe0 	bl	8000ae0 <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d8f7      	bhi.n	8000b1c <HAL_Delay+0x28>
  {
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000018 	.word	0x20000018

08000b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	60d3      	str	r3, [r2, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <__NVIC_GetPriorityGrouping+0x18>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f003 0307 	and.w	r3, r3, #7
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bc80      	pop	{r7}
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	; (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	; (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	; 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f7ff ff90 	bl	8000ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff49 	bl	8000b3c <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff5e 	bl	8000b84 <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ff90 	bl	8000bf4 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff5f 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffb0 	bl	8000c58 <SysTick_Config>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b08b      	sub	sp, #44	; 0x2c
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d16:	e169      	b.n	8000fec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f040 8158 	bne.w	8000fe6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	4a9a      	ldr	r2, [pc, #616]	; (8000fa4 <HAL_GPIO_Init+0x2a0>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d05e      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
 8000d40:	4a98      	ldr	r2, [pc, #608]	; (8000fa4 <HAL_GPIO_Init+0x2a0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d875      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d46:	4a98      	ldr	r2, [pc, #608]	; (8000fa8 <HAL_GPIO_Init+0x2a4>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d058      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
 8000d4c:	4a96      	ldr	r2, [pc, #600]	; (8000fa8 <HAL_GPIO_Init+0x2a4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d86f      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d52:	4a96      	ldr	r2, [pc, #600]	; (8000fac <HAL_GPIO_Init+0x2a8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d052      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
 8000d58:	4a94      	ldr	r2, [pc, #592]	; (8000fac <HAL_GPIO_Init+0x2a8>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d869      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d5e:	4a94      	ldr	r2, [pc, #592]	; (8000fb0 <HAL_GPIO_Init+0x2ac>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d04c      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
 8000d64:	4a92      	ldr	r2, [pc, #584]	; (8000fb0 <HAL_GPIO_Init+0x2ac>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d863      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d6a:	4a92      	ldr	r2, [pc, #584]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d046      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
 8000d70:	4a90      	ldr	r2, [pc, #576]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d85d      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d76:	2b12      	cmp	r3, #18
 8000d78:	d82a      	bhi.n	8000dd0 <HAL_GPIO_Init+0xcc>
 8000d7a:	2b12      	cmp	r3, #18
 8000d7c:	d859      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d7e:	a201      	add	r2, pc, #4	; (adr r2, 8000d84 <HAL_GPIO_Init+0x80>)
 8000d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d84:	08000dff 	.word	0x08000dff
 8000d88:	08000dd9 	.word	0x08000dd9
 8000d8c:	08000deb 	.word	0x08000deb
 8000d90:	08000e2d 	.word	0x08000e2d
 8000d94:	08000e33 	.word	0x08000e33
 8000d98:	08000e33 	.word	0x08000e33
 8000d9c:	08000e33 	.word	0x08000e33
 8000da0:	08000e33 	.word	0x08000e33
 8000da4:	08000e33 	.word	0x08000e33
 8000da8:	08000e33 	.word	0x08000e33
 8000dac:	08000e33 	.word	0x08000e33
 8000db0:	08000e33 	.word	0x08000e33
 8000db4:	08000e33 	.word	0x08000e33
 8000db8:	08000e33 	.word	0x08000e33
 8000dbc:	08000e33 	.word	0x08000e33
 8000dc0:	08000e33 	.word	0x08000e33
 8000dc4:	08000e33 	.word	0x08000e33
 8000dc8:	08000de1 	.word	0x08000de1
 8000dcc:	08000df5 	.word	0x08000df5
 8000dd0:	4a79      	ldr	r2, [pc, #484]	; (8000fb8 <HAL_GPIO_Init+0x2b4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d013      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dd6:	e02c      	b.n	8000e32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	623b      	str	r3, [r7, #32]
          break;
 8000dde:	e029      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	3304      	adds	r3, #4
 8000de6:	623b      	str	r3, [r7, #32]
          break;
 8000de8:	e024      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	3308      	adds	r3, #8
 8000df0:	623b      	str	r3, [r7, #32]
          break;
 8000df2:	e01f      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	330c      	adds	r3, #12
 8000dfa:	623b      	str	r3, [r7, #32]
          break;
 8000dfc:	e01a      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e06:	2304      	movs	r3, #4
 8000e08:	623b      	str	r3, [r7, #32]
          break;
 8000e0a:	e013      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d105      	bne.n	8000e20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e14:	2308      	movs	r3, #8
 8000e16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69fa      	ldr	r2, [r7, #28]
 8000e1c:	611a      	str	r2, [r3, #16]
          break;
 8000e1e:	e009      	b.n	8000e34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e20:	2308      	movs	r3, #8
 8000e22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69fa      	ldr	r2, [r7, #28]
 8000e28:	615a      	str	r2, [r3, #20]
          break;
 8000e2a:	e003      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
          break;
 8000e30:	e000      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          break;
 8000e32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	2bff      	cmp	r3, #255	; 0xff
 8000e38:	d801      	bhi.n	8000e3e <HAL_GPIO_Init+0x13a>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	e001      	b.n	8000e42 <HAL_GPIO_Init+0x13e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3304      	adds	r3, #4
 8000e42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	2bff      	cmp	r3, #255	; 0xff
 8000e48:	d802      	bhi.n	8000e50 <HAL_GPIO_Init+0x14c>
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	e002      	b.n	8000e56 <HAL_GPIO_Init+0x152>
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	3b08      	subs	r3, #8
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	210f      	movs	r1, #15
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	401a      	ands	r2, r3
 8000e68:	6a39      	ldr	r1, [r7, #32]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	431a      	orrs	r2, r3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e84:	4b4d      	ldr	r3, [pc, #308]	; (8000fbc <HAL_GPIO_Init+0x2b8>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a4c      	ldr	r2, [pc, #304]	; (8000fbc <HAL_GPIO_Init+0x2b8>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b4a      	ldr	r3, [pc, #296]	; (8000fbc <HAL_GPIO_Init+0x2b8>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e9c:	4a48      	ldr	r2, [pc, #288]	; (8000fc0 <HAL_GPIO_Init+0x2bc>)
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a40      	ldr	r2, [pc, #256]	; (8000fc4 <HAL_GPIO_Init+0x2c0>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d013      	beq.n	8000ef0 <HAL_GPIO_Init+0x1ec>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a3f      	ldr	r2, [pc, #252]	; (8000fc8 <HAL_GPIO_Init+0x2c4>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d00d      	beq.n	8000eec <HAL_GPIO_Init+0x1e8>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a3e      	ldr	r2, [pc, #248]	; (8000fcc <HAL_GPIO_Init+0x2c8>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d007      	beq.n	8000ee8 <HAL_GPIO_Init+0x1e4>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a3d      	ldr	r2, [pc, #244]	; (8000fd0 <HAL_GPIO_Init+0x2cc>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d101      	bne.n	8000ee4 <HAL_GPIO_Init+0x1e0>
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e006      	b.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	e004      	b.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	e002      	b.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000eec:	2301      	movs	r3, #1
 8000eee:	e000      	b.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef4:	f002 0203 	and.w	r2, r2, #3
 8000ef8:	0092      	lsls	r2, r2, #2
 8000efa:	4093      	lsls	r3, r2
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f02:	492f      	ldr	r1, [pc, #188]	; (8000fc0 <HAL_GPIO_Init+0x2bc>)
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	3302      	adds	r3, #2
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d006      	beq.n	8000f2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	492c      	ldr	r1, [pc, #176]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	608b      	str	r3, [r1, #8]
 8000f28:	e006      	b.n	8000f38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f2c:	689a      	ldr	r2, [r3, #8]
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	4928      	ldr	r1, [pc, #160]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d006      	beq.n	8000f52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f44:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	4922      	ldr	r1, [pc, #136]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	60cb      	str	r3, [r1, #12]
 8000f50:	e006      	b.n	8000f60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f52:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	491e      	ldr	r1, [pc, #120]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d006      	beq.n	8000f7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	4918      	ldr	r1, [pc, #96]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	604b      	str	r3, [r1, #4]
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	4914      	ldr	r1, [pc, #80]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d021      	beq.n	8000fd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	490e      	ldr	r1, [pc, #56]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	600b      	str	r3, [r1, #0]
 8000fa0:	e021      	b.n	8000fe6 <HAL_GPIO_Init+0x2e2>
 8000fa2:	bf00      	nop
 8000fa4:	10320000 	.word	0x10320000
 8000fa8:	10310000 	.word	0x10310000
 8000fac:	10220000 	.word	0x10220000
 8000fb0:	10210000 	.word	0x10210000
 8000fb4:	10120000 	.word	0x10120000
 8000fb8:	10110000 	.word	0x10110000
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010000 	.word	0x40010000
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	40010c00 	.word	0x40010c00
 8000fcc:	40011000 	.word	0x40011000
 8000fd0:	40011400 	.word	0x40011400
 8000fd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_GPIO_Init+0x304>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	4909      	ldr	r1, [pc, #36]	; (8001008 <HAL_GPIO_Init+0x304>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	3301      	adds	r3, #1
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f47f ae8e 	bne.w	8000d18 <HAL_GPIO_Init+0x14>
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	372c      	adds	r7, #44	; 0x2c
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	40010400 	.word	0x40010400

0800100c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e12b      	b.n	8001276 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d106      	bne.n	8001038 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff fc6a 	bl	800090c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2224      	movs	r2, #36	; 0x24
 800103c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0201 	bic.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800105e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800106e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001070:	f001 f832 	bl	80020d8 <HAL_RCC_GetPCLK1Freq>
 8001074:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	4a81      	ldr	r2, [pc, #516]	; (8001280 <HAL_I2C_Init+0x274>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d807      	bhi.n	8001090 <HAL_I2C_Init+0x84>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4a80      	ldr	r2, [pc, #512]	; (8001284 <HAL_I2C_Init+0x278>)
 8001084:	4293      	cmp	r3, r2
 8001086:	bf94      	ite	ls
 8001088:	2301      	movls	r3, #1
 800108a:	2300      	movhi	r3, #0
 800108c:	b2db      	uxtb	r3, r3
 800108e:	e006      	b.n	800109e <HAL_I2C_Init+0x92>
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4a7d      	ldr	r2, [pc, #500]	; (8001288 <HAL_I2C_Init+0x27c>)
 8001094:	4293      	cmp	r3, r2
 8001096:	bf94      	ite	ls
 8001098:	2301      	movls	r3, #1
 800109a:	2300      	movhi	r3, #0
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e0e7      	b.n	8001276 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	4a78      	ldr	r2, [pc, #480]	; (800128c <HAL_I2C_Init+0x280>)
 80010aa:	fba2 2303 	umull	r2, r3, r2, r3
 80010ae:	0c9b      	lsrs	r3, r3, #18
 80010b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6a1b      	ldr	r3, [r3, #32]
 80010cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4a6a      	ldr	r2, [pc, #424]	; (8001280 <HAL_I2C_Init+0x274>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d802      	bhi.n	80010e0 <HAL_I2C_Init+0xd4>
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	3301      	adds	r3, #1
 80010de:	e009      	b.n	80010f4 <HAL_I2C_Init+0xe8>
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010e6:	fb02 f303 	mul.w	r3, r2, r3
 80010ea:	4a69      	ldr	r2, [pc, #420]	; (8001290 <HAL_I2C_Init+0x284>)
 80010ec:	fba2 2303 	umull	r2, r3, r2, r3
 80010f0:	099b      	lsrs	r3, r3, #6
 80010f2:	3301      	adds	r3, #1
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	430b      	orrs	r3, r1
 80010fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001106:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	495c      	ldr	r1, [pc, #368]	; (8001280 <HAL_I2C_Init+0x274>)
 8001110:	428b      	cmp	r3, r1
 8001112:	d819      	bhi.n	8001148 <HAL_I2C_Init+0x13c>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	1e59      	subs	r1, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001122:	1c59      	adds	r1, r3, #1
 8001124:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001128:	400b      	ands	r3, r1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00a      	beq.n	8001144 <HAL_I2C_Init+0x138>
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	1e59      	subs	r1, r3, #1
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	fbb1 f3f3 	udiv	r3, r1, r3
 800113c:	3301      	adds	r3, #1
 800113e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001142:	e051      	b.n	80011e8 <HAL_I2C_Init+0x1dc>
 8001144:	2304      	movs	r3, #4
 8001146:	e04f      	b.n	80011e8 <HAL_I2C_Init+0x1dc>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d111      	bne.n	8001174 <HAL_I2C_Init+0x168>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	1e58      	subs	r0, r3, #1
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6859      	ldr	r1, [r3, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	440b      	add	r3, r1
 800115e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001162:	3301      	adds	r3, #1
 8001164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001168:	2b00      	cmp	r3, #0
 800116a:	bf0c      	ite	eq
 800116c:	2301      	moveq	r3, #1
 800116e:	2300      	movne	r3, #0
 8001170:	b2db      	uxtb	r3, r3
 8001172:	e012      	b.n	800119a <HAL_I2C_Init+0x18e>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	1e58      	subs	r0, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6859      	ldr	r1, [r3, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	0099      	lsls	r1, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	fbb0 f3f3 	udiv	r3, r0, r3
 800118a:	3301      	adds	r3, #1
 800118c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001190:	2b00      	cmp	r3, #0
 8001192:	bf0c      	ite	eq
 8001194:	2301      	moveq	r3, #1
 8001196:	2300      	movne	r3, #0
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <HAL_I2C_Init+0x196>
 800119e:	2301      	movs	r3, #1
 80011a0:	e022      	b.n	80011e8 <HAL_I2C_Init+0x1dc>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10e      	bne.n	80011c8 <HAL_I2C_Init+0x1bc>
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1e58      	subs	r0, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6859      	ldr	r1, [r3, #4]
 80011b2:	460b      	mov	r3, r1
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	440b      	add	r3, r1
 80011b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80011bc:	3301      	adds	r3, #1
 80011be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011c6:	e00f      	b.n	80011e8 <HAL_I2C_Init+0x1dc>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	1e58      	subs	r0, r3, #1
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6859      	ldr	r1, [r3, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	0099      	lsls	r1, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	fbb0 f3f3 	udiv	r3, r0, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	6809      	ldr	r1, [r1, #0]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69da      	ldr	r2, [r3, #28]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001216:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6911      	ldr	r1, [r2, #16]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	68d2      	ldr	r2, [r2, #12]
 8001222:	4311      	orrs	r1, r2
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	430b      	orrs	r3, r1
 800122a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	695a      	ldr	r2, [r3, #20]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	430a      	orrs	r2, r1
 8001246:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 0201 	orr.w	r2, r2, #1
 8001256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2220      	movs	r2, #32
 8001262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	000186a0 	.word	0x000186a0
 8001284:	001e847f 	.word	0x001e847f
 8001288:	003d08ff 	.word	0x003d08ff
 800128c:	431bde83 	.word	0x431bde83
 8001290:	10624dd3 	.word	0x10624dd3

08001294 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af02      	add	r7, sp, #8
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	461a      	mov	r2, r3
 80012a0:	460b      	mov	r3, r1
 80012a2:	817b      	strh	r3, [r7, #10]
 80012a4:	4613      	mov	r3, r2
 80012a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff fc1a 	bl	8000ae0 <HAL_GetTick>
 80012ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b20      	cmp	r3, #32
 80012b8:	f040 80e0 	bne.w	800147c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	2319      	movs	r3, #25
 80012c2:	2201      	movs	r2, #1
 80012c4:	4970      	ldr	r1, [pc, #448]	; (8001488 <HAL_I2C_Master_Transmit+0x1f4>)
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f000 f964 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80012d2:	2302      	movs	r3, #2
 80012d4:	e0d3      	b.n	800147e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <HAL_I2C_Master_Transmit+0x50>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e0cc      	b.n	800147e <HAL_I2C_Master_Transmit+0x1ea>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d007      	beq.n	800130a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f042 0201 	orr.w	r2, r2, #1
 8001308:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001318:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2221      	movs	r2, #33	; 0x21
 800131e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2210      	movs	r2, #16
 8001326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2200      	movs	r2, #0
 800132e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	893a      	ldrh	r2, [r7, #8]
 800133a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001340:	b29a      	uxth	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4a50      	ldr	r2, [pc, #320]	; (800148c <HAL_I2C_Master_Transmit+0x1f8>)
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800134c:	8979      	ldrh	r1, [r7, #10]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	6a3a      	ldr	r2, [r7, #32]
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 f89c 	bl	8001490 <I2C_MasterRequestWrite>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e08d      	b.n	800147e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001378:	e066      	b.n	8001448 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	6a39      	ldr	r1, [r7, #32]
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 fa22 	bl	80017c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00d      	beq.n	80013a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	2b04      	cmp	r3, #4
 8001390:	d107      	bne.n	80013a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e06b      	b.n	800147e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	781a      	ldrb	r2, [r3, #0]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	3b01      	subs	r3, #1
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ce:	3b01      	subs	r3, #1
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b04      	cmp	r3, #4
 80013e2:	d11b      	bne.n	800141c <HAL_I2C_Master_Transmit+0x188>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d017      	beq.n	800141c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	781a      	ldrb	r2, [r3, #0]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	1c5a      	adds	r2, r3, #1
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001406:	b29b      	uxth	r3, r3
 8001408:	3b01      	subs	r3, #1
 800140a:	b29a      	uxth	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001414:	3b01      	subs	r3, #1
 8001416:	b29a      	uxth	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	6a39      	ldr	r1, [r7, #32]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f000 fa19 	bl	8001858 <I2C_WaitOnBTFFlagUntilTimeout>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00d      	beq.n	8001448 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	2b04      	cmp	r3, #4
 8001432:	d107      	bne.n	8001444 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001442:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e01a      	b.n	800147e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800144c:	2b00      	cmp	r3, #0
 800144e:	d194      	bne.n	800137a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800145e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2220      	movs	r2, #32
 8001464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	e000      	b.n	800147e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800147c:	2302      	movs	r3, #2
  }
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	00100002 	.word	0x00100002
 800148c:	ffff0000 	.word	0xffff0000

08001490 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af02      	add	r7, sp, #8
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	607a      	str	r2, [r7, #4]
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	460b      	mov	r3, r1
 800149e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d006      	beq.n	80014ba <I2C_MasterRequestWrite+0x2a>
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d003      	beq.n	80014ba <I2C_MasterRequestWrite+0x2a>
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80014b8:	d108      	bne.n	80014cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	e00b      	b.n	80014e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	2b12      	cmp	r3, #18
 80014d2:	d107      	bne.n	80014e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f000 f84f 	bl	8001594 <I2C_WaitOnFlagUntilTimeout>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00d      	beq.n	8001518 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800150a:	d103      	bne.n	8001514 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001512:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e035      	b.n	8001584 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001520:	d108      	bne.n	8001534 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001522:	897b      	ldrh	r3, [r7, #10]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	e01b      	b.n	800156c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001534:	897b      	ldrh	r3, [r7, #10]
 8001536:	11db      	asrs	r3, r3, #7
 8001538:	b2db      	uxtb	r3, r3
 800153a:	f003 0306 	and.w	r3, r3, #6
 800153e:	b2db      	uxtb	r3, r3
 8001540:	f063 030f 	orn	r3, r3, #15
 8001544:	b2da      	uxtb	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	490e      	ldr	r1, [pc, #56]	; (800158c <I2C_MasterRequestWrite+0xfc>)
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 f898 	bl	8001688 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e010      	b.n	8001584 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001562:	897b      	ldrh	r3, [r7, #10]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	4907      	ldr	r1, [pc, #28]	; (8001590 <I2C_MasterRequestWrite+0x100>)
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 f888 	bl	8001688 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	00010008 	.word	0x00010008
 8001590:	00010002 	.word	0x00010002

08001594 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	4613      	mov	r3, r2
 80015a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015a4:	e048      	b.n	8001638 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d044      	beq.n	8001638 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ae:	f7ff fa97 	bl	8000ae0 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d302      	bcc.n	80015c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d139      	bne.n	8001638 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	0c1b      	lsrs	r3, r3, #16
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d10d      	bne.n	80015ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	43da      	mvns	r2, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	4013      	ands	r3, r2
 80015da:	b29b      	uxth	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf0c      	ite	eq
 80015e0:	2301      	moveq	r3, #1
 80015e2:	2300      	movne	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	e00c      	b.n	8001604 <I2C_WaitOnFlagUntilTimeout+0x70>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	43da      	mvns	r2, r3
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	4013      	ands	r3, r2
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	461a      	mov	r2, r3
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	429a      	cmp	r2, r3
 8001608:	d116      	bne.n	8001638 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2200      	movs	r2, #0
 800160e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2220      	movs	r2, #32
 8001614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	f043 0220 	orr.w	r2, r3, #32
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e023      	b.n	8001680 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	0c1b      	lsrs	r3, r3, #16
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b01      	cmp	r3, #1
 8001640:	d10d      	bne.n	800165e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	43da      	mvns	r2, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	4013      	ands	r3, r2
 800164e:	b29b      	uxth	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf0c      	ite	eq
 8001654:	2301      	moveq	r3, #1
 8001656:	2300      	movne	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	e00c      	b.n	8001678 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	43da      	mvns	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	4013      	ands	r3, r2
 800166a:	b29b      	uxth	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf0c      	ite	eq
 8001670:	2301      	moveq	r3, #1
 8001672:	2300      	movne	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	461a      	mov	r2, r3
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	429a      	cmp	r2, r3
 800167c:	d093      	beq.n	80015a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001696:	e071      	b.n	800177c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016a6:	d123      	bne.n	80016f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80016c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2220      	movs	r2, #32
 80016cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f043 0204 	orr.w	r2, r3, #4
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e067      	b.n	80017c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f6:	d041      	beq.n	800177c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016f8:	f7ff f9f2 	bl	8000ae0 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	d302      	bcc.n	800170e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d136      	bne.n	800177c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	0c1b      	lsrs	r3, r3, #16
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d10c      	bne.n	8001732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	43da      	mvns	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4013      	ands	r3, r2
 8001724:	b29b      	uxth	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	bf14      	ite	ne
 800172a:	2301      	movne	r3, #1
 800172c:	2300      	moveq	r3, #0
 800172e:	b2db      	uxtb	r3, r3
 8001730:	e00b      	b.n	800174a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	43da      	mvns	r2, r3
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	4013      	ands	r3, r2
 800173e:	b29b      	uxth	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	bf14      	ite	ne
 8001744:	2301      	movne	r3, #1
 8001746:	2300      	moveq	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d016      	beq.n	800177c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2220      	movs	r2, #32
 8001758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f043 0220 	orr.w	r2, r3, #32
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e021      	b.n	80017c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	0c1b      	lsrs	r3, r3, #16
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b01      	cmp	r3, #1
 8001784:	d10c      	bne.n	80017a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	43da      	mvns	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	4013      	ands	r3, r2
 8001792:	b29b      	uxth	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	bf14      	ite	ne
 8001798:	2301      	movne	r3, #1
 800179a:	2300      	moveq	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	e00b      	b.n	80017b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	43da      	mvns	r2, r3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4013      	ands	r3, r2
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	bf14      	ite	ne
 80017b2:	2301      	movne	r3, #1
 80017b4:	2300      	moveq	r3, #0
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f47f af6d 	bne.w	8001698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80017d4:	e034      	b.n	8001840 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 f886 	bl	80018e8 <I2C_IsAcknowledgeFailed>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e034      	b.n	8001850 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ec:	d028      	beq.n	8001840 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ee:	f7ff f977 	bl	8000ae0 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d302      	bcc.n	8001804 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d11d      	bne.n	8001840 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180e:	2b80      	cmp	r3, #128	; 0x80
 8001810:	d016      	beq.n	8001840 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2220      	movs	r2, #32
 800181c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f043 0220 	orr.w	r2, r3, #32
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e007      	b.n	8001850 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184a:	2b80      	cmp	r3, #128	; 0x80
 800184c:	d1c3      	bne.n	80017d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001864:	e034      	b.n	80018d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 f83e 	bl	80018e8 <I2C_IsAcknowledgeFailed>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e034      	b.n	80018e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d028      	beq.n	80018d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800187e:	f7ff f92f 	bl	8000ae0 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	68ba      	ldr	r2, [r7, #8]
 800188a:	429a      	cmp	r2, r3
 800188c:	d302      	bcc.n	8001894 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d11d      	bne.n	80018d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d016      	beq.n	80018d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2200      	movs	r2, #0
 80018a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2220      	movs	r2, #32
 80018ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f043 0220 	orr.w	r2, r3, #32
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e007      	b.n	80018e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d1c3      	bne.n	8001866 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018fe:	d11b      	bne.n	8001938 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001908:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2220      	movs	r2, #32
 8001914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	f043 0204 	orr.w	r2, r3, #4
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e000      	b.n	800193a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e272      	b.n	8001e3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 8087 	beq.w	8001a72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001964:	4b92      	ldr	r3, [pc, #584]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b04      	cmp	r3, #4
 800196e:	d00c      	beq.n	800198a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001970:	4b8f      	ldr	r3, [pc, #572]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b08      	cmp	r3, #8
 800197a:	d112      	bne.n	80019a2 <HAL_RCC_OscConfig+0x5e>
 800197c:	4b8c      	ldr	r3, [pc, #560]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001988:	d10b      	bne.n	80019a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198a:	4b89      	ldr	r3, [pc, #548]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d06c      	beq.n	8001a70 <HAL_RCC_OscConfig+0x12c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d168      	bne.n	8001a70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e24c      	b.n	8001e3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_OscConfig+0x76>
 80019ac:	4b80      	ldr	r3, [pc, #512]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a7f      	ldr	r2, [pc, #508]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	e02e      	b.n	8001a18 <HAL_RCC_OscConfig+0xd4>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0x98>
 80019c2:	4b7b      	ldr	r3, [pc, #492]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a7a      	ldr	r2, [pc, #488]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b78      	ldr	r3, [pc, #480]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a77      	ldr	r2, [pc, #476]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e01d      	b.n	8001a18 <HAL_RCC_OscConfig+0xd4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0xbc>
 80019e6:	4b72      	ldr	r3, [pc, #456]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a71      	ldr	r2, [pc, #452]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b6f      	ldr	r3, [pc, #444]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a6e      	ldr	r2, [pc, #440]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0xd4>
 8001a00:	4b6b      	ldr	r3, [pc, #428]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a6a      	ldr	r2, [pc, #424]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a67      	ldr	r2, [pc, #412]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d013      	beq.n	8001a48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff f85e 	bl	8000ae0 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff f85a 	bl	8000ae0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e200      	b.n	8001e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b5d      	ldr	r3, [pc, #372]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0xe4>
 8001a46:	e014      	b.n	8001a72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff f84a 	bl	8000ae0 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff f846 	bl	8000ae0 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e1ec      	b.n	8001e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x10c>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d063      	beq.n	8001b46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a7e:	4b4c      	ldr	r3, [pc, #304]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a8a:	4b49      	ldr	r3, [pc, #292]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d11c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x18c>
 8001a96:	4b46      	ldr	r3, [pc, #280]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d116      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	4b43      	ldr	r3, [pc, #268]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d005      	beq.n	8001aba <HAL_RCC_OscConfig+0x176>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e1c0      	b.n	8001e3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aba:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4939      	ldr	r1, [pc, #228]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	e03a      	b.n	8001b46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d020      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad8:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ade:	f7fe ffff 	bl	8000ae0 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae6:	f7fe fffb 	bl	8000ae0 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e1a1      	b.n	8001e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b04:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4927      	ldr	r1, [pc, #156]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
 8001b18:	e015      	b.n	8001b46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1a:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7fe ffde 	bl	8000ae0 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b28:	f7fe ffda 	bl	8000ae0 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e180      	b.n	8001e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d03a      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d019      	beq.n	8001b8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b60:	f7fe ffbe 	bl	8000ae0 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b68:	f7fe ffba 	bl	8000ae0 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e160      	b.n	8001e3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b86:	2001      	movs	r0, #1
 8001b88:	f000 faba 	bl	8002100 <RCC_Delay>
 8001b8c:	e01c      	b.n	8001bc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b94:	f7fe ffa4 	bl	8000ae0 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b9a:	e00f      	b.n	8001bbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9c:	f7fe ffa0 	bl	8000ae0 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d908      	bls.n	8001bbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e146      	b.n	8001e3c <HAL_RCC_OscConfig+0x4f8>
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	42420000 	.word	0x42420000
 8001bb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbc:	4b92      	ldr	r3, [pc, #584]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1e9      	bne.n	8001b9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80a6 	beq.w	8001d22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bda:	4b8b      	ldr	r3, [pc, #556]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10d      	bne.n	8001c02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	4b88      	ldr	r3, [pc, #544]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	4a87      	ldr	r2, [pc, #540]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	61d3      	str	r3, [r2, #28]
 8001bf2:	4b85      	ldr	r3, [pc, #532]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c02:	4b82      	ldr	r3, [pc, #520]	; (8001e0c <HAL_RCC_OscConfig+0x4c8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d118      	bne.n	8001c40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0e:	4b7f      	ldr	r3, [pc, #508]	; (8001e0c <HAL_RCC_OscConfig+0x4c8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a7e      	ldr	r2, [pc, #504]	; (8001e0c <HAL_RCC_OscConfig+0x4c8>)
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c1a:	f7fe ff61 	bl	8000ae0 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c22:	f7fe ff5d 	bl	8000ae0 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b64      	cmp	r3, #100	; 0x64
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e103      	b.n	8001e3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	4b75      	ldr	r3, [pc, #468]	; (8001e0c <HAL_RCC_OscConfig+0x4c8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x312>
 8001c48:	4b6f      	ldr	r3, [pc, #444]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4a6e      	ldr	r2, [pc, #440]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6213      	str	r3, [r2, #32]
 8001c54:	e02d      	b.n	8001cb2 <HAL_RCC_OscConfig+0x36e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x334>
 8001c5e:	4b6a      	ldr	r3, [pc, #424]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4a69      	ldr	r2, [pc, #420]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	6213      	str	r3, [r2, #32]
 8001c6a:	4b67      	ldr	r3, [pc, #412]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a66      	ldr	r2, [pc, #408]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	f023 0304 	bic.w	r3, r3, #4
 8001c74:	6213      	str	r3, [r2, #32]
 8001c76:	e01c      	b.n	8001cb2 <HAL_RCC_OscConfig+0x36e>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	d10c      	bne.n	8001c9a <HAL_RCC_OscConfig+0x356>
 8001c80:	4b61      	ldr	r3, [pc, #388]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4a60      	ldr	r2, [pc, #384]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6213      	str	r3, [r2, #32]
 8001c8c:	4b5e      	ldr	r3, [pc, #376]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a5d      	ldr	r2, [pc, #372]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	e00b      	b.n	8001cb2 <HAL_RCC_OscConfig+0x36e>
 8001c9a:	4b5b      	ldr	r3, [pc, #364]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4a5a      	ldr	r2, [pc, #360]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	6213      	str	r3, [r2, #32]
 8001ca6:	4b58      	ldr	r3, [pc, #352]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4a57      	ldr	r2, [pc, #348]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	f023 0304 	bic.w	r3, r3, #4
 8001cb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d015      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cba:	f7fe ff11 	bl	8000ae0 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc0:	e00a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc2:	f7fe ff0d 	bl	8000ae0 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e0b1      	b.n	8001e3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd8:	4b4b      	ldr	r3, [pc, #300]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0ee      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x37e>
 8001ce4:	e014      	b.n	8001d10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7fe fefb 	bl	8000ae0 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7fe fef7 	bl	8000ae0 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e09b      	b.n	8001e3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d04:	4b40      	ldr	r3, [pc, #256]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1ee      	bne.n	8001cee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d105      	bne.n	8001d22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d16:	4b3c      	ldr	r3, [pc, #240]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	4a3b      	ldr	r2, [pc, #236]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8087 	beq.w	8001e3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d2c:	4b36      	ldr	r3, [pc, #216]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 030c 	and.w	r3, r3, #12
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d061      	beq.n	8001dfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d146      	bne.n	8001dce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d40:	4b33      	ldr	r3, [pc, #204]	; (8001e10 <HAL_RCC_OscConfig+0x4cc>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7fe fecb 	bl	8000ae0 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7fe fec7 	bl	8000ae0 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e06d      	b.n	8001e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d60:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d74:	d108      	bne.n	8001d88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d76:	4b24      	ldr	r3, [pc, #144]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	4921      	ldr	r1, [pc, #132]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d88:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a19      	ldr	r1, [r3, #32]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	430b      	orrs	r3, r1
 8001d9a:	491b      	ldr	r1, [pc, #108]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <HAL_RCC_OscConfig+0x4cc>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7fe fe9b 	bl	8000ae0 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7fe fe97 	bl	8000ae0 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e03d      	b.n	8001e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc0:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x46a>
 8001dcc:	e035      	b.n	8001e3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <HAL_RCC_OscConfig+0x4cc>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7fe fe84 	bl	8000ae0 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7fe fe80 	bl	8000ae0 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e026      	b.n	8001e3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dee:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x498>
 8001dfa:	e01e      	b.n	8001e3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d107      	bne.n	8001e14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e019      	b.n	8001e3c <HAL_RCC_OscConfig+0x4f8>
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCC_OscConfig+0x500>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d106      	bne.n	8001e36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000

08001e48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0d0      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b6a      	ldr	r3, [pc, #424]	; (8002008 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d910      	bls.n	8001e8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b67      	ldr	r3, [pc, #412]	; (8002008 <HAL_RCC_ClockConfig+0x1c0>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 0207 	bic.w	r2, r3, #7
 8001e72:	4965      	ldr	r1, [pc, #404]	; (8002008 <HAL_RCC_ClockConfig+0x1c0>)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b63      	ldr	r3, [pc, #396]	; (8002008 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0b8      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d020      	beq.n	8001eda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea4:	4b59      	ldr	r3, [pc, #356]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4a58      	ldr	r2, [pc, #352]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ebc:	4b53      	ldr	r3, [pc, #332]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ec6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec8:	4b50      	ldr	r3, [pc, #320]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	494d      	ldr	r1, [pc, #308]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d040      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d107      	bne.n	8001efe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d115      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e07f      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d107      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f06:	4b41      	ldr	r3, [pc, #260]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d109      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e073      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f16:	4b3d      	ldr	r3, [pc, #244]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e06b      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f26:	4b39      	ldr	r3, [pc, #228]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f023 0203 	bic.w	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4936      	ldr	r1, [pc, #216]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f38:	f7fe fdd2 	bl	8000ae0 <HAL_GetTick>
 8001f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3e:	e00a      	b.n	8001f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f40:	f7fe fdce 	bl	8000ae0 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e053      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	4b2d      	ldr	r3, [pc, #180]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 020c 	and.w	r2, r3, #12
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d1eb      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f68:	4b27      	ldr	r3, [pc, #156]	; (8002008 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d210      	bcs.n	8001f98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f76:	4b24      	ldr	r3, [pc, #144]	; (8002008 <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 0207 	bic.w	r2, r3, #7
 8001f7e:	4922      	ldr	r1, [pc, #136]	; (8002008 <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e032      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4916      	ldr	r1, [pc, #88]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	490e      	ldr	r1, [pc, #56]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fd6:	f000 f821 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	490a      	ldr	r1, [pc, #40]	; (8002010 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe8:	5ccb      	ldrb	r3, [r1, r3]
 8001fea:	fa22 f303 	lsr.w	r3, r2, r3
 8001fee:	4a09      	ldr	r2, [pc, #36]	; (8002014 <HAL_RCC_ClockConfig+0x1cc>)
 8001ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_RCC_ClockConfig+0x1d0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fd30 	bl	8000a5c <HAL_InitTick>

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40022000 	.word	0x40022000
 800200c:	40021000 	.word	0x40021000
 8002010:	080022a8 	.word	0x080022a8
 8002014:	20000010 	.word	0x20000010
 8002018:	20000014 	.word	0x20000014

0800201c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800201c:	b480      	push	{r7}
 800201e:	b087      	sub	sp, #28
 8002020:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	2300      	movs	r3, #0
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002036:	4b1e      	ldr	r3, [pc, #120]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 030c 	and.w	r3, r3, #12
 8002042:	2b04      	cmp	r3, #4
 8002044:	d002      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x30>
 8002046:	2b08      	cmp	r3, #8
 8002048:	d003      	beq.n	8002052 <HAL_RCC_GetSysClockFreq+0x36>
 800204a:	e027      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800204e:	613b      	str	r3, [r7, #16]
      break;
 8002050:	e027      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	0c9b      	lsrs	r3, r3, #18
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	4a17      	ldr	r2, [pc, #92]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800205c:	5cd3      	ldrb	r3, [r2, r3]
 800205e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d010      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	0c5b      	lsrs	r3, r3, #17
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	4a11      	ldr	r2, [pc, #68]	; (80020bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002076:	5cd3      	ldrb	r3, [r2, r3]
 8002078:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800207e:	fb03 f202 	mul.w	r2, r3, r2
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	fbb2 f3f3 	udiv	r3, r2, r3
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	e004      	b.n	8002096 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a0c      	ldr	r2, [pc, #48]	; (80020c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002090:	fb02 f303 	mul.w	r3, r2, r3
 8002094:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	613b      	str	r3, [r7, #16]
      break;
 800209a:	e002      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800209e:	613b      	str	r3, [r7, #16]
      break;
 80020a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020a2:	693b      	ldr	r3, [r7, #16]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	371c      	adds	r7, #28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	007a1200 	.word	0x007a1200
 80020b8:	080022c0 	.word	0x080022c0
 80020bc:	080022d0 	.word	0x080022d0
 80020c0:	003d0900 	.word	0x003d0900

080020c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c8:	4b02      	ldr	r3, [pc, #8]	; (80020d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	20000010 	.word	0x20000010

080020d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020dc:	f7ff fff2 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	0a1b      	lsrs	r3, r3, #8
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	4903      	ldr	r1, [pc, #12]	; (80020fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000
 80020fc:	080022b8 	.word	0x080022b8

08002100 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <RCC_Delay+0x34>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <RCC_Delay+0x38>)
 800210e:	fba2 2303 	umull	r2, r3, r2, r3
 8002112:	0a5b      	lsrs	r3, r3, #9
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	fb02 f303 	mul.w	r3, r2, r3
 800211a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800211c:	bf00      	nop
  }
  while (Delay --);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1e5a      	subs	r2, r3, #1
 8002122:	60fa      	str	r2, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f9      	bne.n	800211c <RCC_Delay+0x1c>
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr
 8002134:	20000010 	.word	0x20000010
 8002138:	10624dd3 	.word	0x10624dd3

0800213c <__itoa>:
 800213c:	1e93      	subs	r3, r2, #2
 800213e:	2b22      	cmp	r3, #34	; 0x22
 8002140:	b510      	push	{r4, lr}
 8002142:	460c      	mov	r4, r1
 8002144:	d904      	bls.n	8002150 <__itoa+0x14>
 8002146:	2300      	movs	r3, #0
 8002148:	461c      	mov	r4, r3
 800214a:	700b      	strb	r3, [r1, #0]
 800214c:	4620      	mov	r0, r4
 800214e:	bd10      	pop	{r4, pc}
 8002150:	2a0a      	cmp	r2, #10
 8002152:	d109      	bne.n	8002168 <__itoa+0x2c>
 8002154:	2800      	cmp	r0, #0
 8002156:	da07      	bge.n	8002168 <__itoa+0x2c>
 8002158:	232d      	movs	r3, #45	; 0x2d
 800215a:	700b      	strb	r3, [r1, #0]
 800215c:	2101      	movs	r1, #1
 800215e:	4240      	negs	r0, r0
 8002160:	4421      	add	r1, r4
 8002162:	f000 f805 	bl	8002170 <__utoa>
 8002166:	e7f1      	b.n	800214c <__itoa+0x10>
 8002168:	2100      	movs	r1, #0
 800216a:	e7f9      	b.n	8002160 <__itoa+0x24>

0800216c <itoa>:
 800216c:	f7ff bfe6 	b.w	800213c <__itoa>

08002170 <__utoa>:
 8002170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002172:	b08b      	sub	sp, #44	; 0x2c
 8002174:	4605      	mov	r5, r0
 8002176:	460b      	mov	r3, r1
 8002178:	466e      	mov	r6, sp
 800217a:	4c1d      	ldr	r4, [pc, #116]	; (80021f0 <__utoa+0x80>)
 800217c:	f104 0c20 	add.w	ip, r4, #32
 8002180:	4637      	mov	r7, r6
 8002182:	6820      	ldr	r0, [r4, #0]
 8002184:	6861      	ldr	r1, [r4, #4]
 8002186:	3408      	adds	r4, #8
 8002188:	c703      	stmia	r7!, {r0, r1}
 800218a:	4564      	cmp	r4, ip
 800218c:	463e      	mov	r6, r7
 800218e:	d1f7      	bne.n	8002180 <__utoa+0x10>
 8002190:	7921      	ldrb	r1, [r4, #4]
 8002192:	6820      	ldr	r0, [r4, #0]
 8002194:	7139      	strb	r1, [r7, #4]
 8002196:	1e91      	subs	r1, r2, #2
 8002198:	2922      	cmp	r1, #34	; 0x22
 800219a:	6038      	str	r0, [r7, #0]
 800219c:	f04f 0100 	mov.w	r1, #0
 80021a0:	d904      	bls.n	80021ac <__utoa+0x3c>
 80021a2:	7019      	strb	r1, [r3, #0]
 80021a4:	460b      	mov	r3, r1
 80021a6:	4618      	mov	r0, r3
 80021a8:	b00b      	add	sp, #44	; 0x2c
 80021aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021ac:	1e58      	subs	r0, r3, #1
 80021ae:	4684      	mov	ip, r0
 80021b0:	fbb5 f7f2 	udiv	r7, r5, r2
 80021b4:	fb02 5617 	mls	r6, r2, r7, r5
 80021b8:	3628      	adds	r6, #40	; 0x28
 80021ba:	446e      	add	r6, sp
 80021bc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80021c0:	460c      	mov	r4, r1
 80021c2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80021c6:	462e      	mov	r6, r5
 80021c8:	42b2      	cmp	r2, r6
 80021ca:	463d      	mov	r5, r7
 80021cc:	f101 0101 	add.w	r1, r1, #1
 80021d0:	d9ee      	bls.n	80021b0 <__utoa+0x40>
 80021d2:	2200      	movs	r2, #0
 80021d4:	545a      	strb	r2, [r3, r1]
 80021d6:	1919      	adds	r1, r3, r4
 80021d8:	1aa5      	subs	r5, r4, r2
 80021da:	42aa      	cmp	r2, r5
 80021dc:	dae3      	bge.n	80021a6 <__utoa+0x36>
 80021de:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80021e2:	780e      	ldrb	r6, [r1, #0]
 80021e4:	3201      	adds	r2, #1
 80021e6:	7006      	strb	r6, [r0, #0]
 80021e8:	f801 5901 	strb.w	r5, [r1], #-1
 80021ec:	e7f4      	b.n	80021d8 <__utoa+0x68>
 80021ee:	bf00      	nop
 80021f0:	080022d2 	.word	0x080022d2

080021f4 <memset>:
 80021f4:	4603      	mov	r3, r0
 80021f6:	4402      	add	r2, r0
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d100      	bne.n	80021fe <memset+0xa>
 80021fc:	4770      	bx	lr
 80021fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002202:	e7f9      	b.n	80021f8 <memset+0x4>

08002204 <__libc_init_array>:
 8002204:	b570      	push	{r4, r5, r6, lr}
 8002206:	2600      	movs	r6, #0
 8002208:	4d0c      	ldr	r5, [pc, #48]	; (800223c <__libc_init_array+0x38>)
 800220a:	4c0d      	ldr	r4, [pc, #52]	; (8002240 <__libc_init_array+0x3c>)
 800220c:	1b64      	subs	r4, r4, r5
 800220e:	10a4      	asrs	r4, r4, #2
 8002210:	42a6      	cmp	r6, r4
 8002212:	d109      	bne.n	8002228 <__libc_init_array+0x24>
 8002214:	f000 f81a 	bl	800224c <_init>
 8002218:	2600      	movs	r6, #0
 800221a:	4d0a      	ldr	r5, [pc, #40]	; (8002244 <__libc_init_array+0x40>)
 800221c:	4c0a      	ldr	r4, [pc, #40]	; (8002248 <__libc_init_array+0x44>)
 800221e:	1b64      	subs	r4, r4, r5
 8002220:	10a4      	asrs	r4, r4, #2
 8002222:	42a6      	cmp	r6, r4
 8002224:	d105      	bne.n	8002232 <__libc_init_array+0x2e>
 8002226:	bd70      	pop	{r4, r5, r6, pc}
 8002228:	f855 3b04 	ldr.w	r3, [r5], #4
 800222c:	4798      	blx	r3
 800222e:	3601      	adds	r6, #1
 8002230:	e7ee      	b.n	8002210 <__libc_init_array+0xc>
 8002232:	f855 3b04 	ldr.w	r3, [r5], #4
 8002236:	4798      	blx	r3
 8002238:	3601      	adds	r6, #1
 800223a:	e7f2      	b.n	8002222 <__libc_init_array+0x1e>
 800223c:	080022f8 	.word	0x080022f8
 8002240:	080022f8 	.word	0x080022f8
 8002244:	080022f8 	.word	0x080022f8
 8002248:	080022fc 	.word	0x080022fc

0800224c <_init>:
 800224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800224e:	bf00      	nop
 8002250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002252:	bc08      	pop	{r3}
 8002254:	469e      	mov	lr, r3
 8002256:	4770      	bx	lr

08002258 <_fini>:
 8002258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800225a:	bf00      	nop
 800225c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800225e:	bc08      	pop	{r3}
 8002260:	469e      	mov	lr, r3
 8002262:	4770      	bx	lr
